## Yuxin Zhuang, Minghong Qi und Yajie Zhang
#Datensatz in Funktion 2 einsetzen
#a)   mean Quantil1 Quantil2    sd Varianz Variationskoeff
#Alter                      24.71       23       26 2.022   4.087            8.18
#Interesse an Mathe          4.46        3        6 1.708   2.918           38.30
#Interesse an Programmieren  4.89        4        6 1.693   2.867           34.62

#(b) z.B.  kat.deskstat(df,3)
#             abs. Haeufigkeit rel. Haeufig. kumulierte Haeufigkeit
#Data Science               34          0.34                     34
#Informatik                 21          0.21                     55
#Mathe                       7          0.07                     62
#Statistik                  38          0.38                    100

#(c) 
#cat_summary(df, "Studienfach", "Interesse an Mathe")
#Kreuztabelle:
              
#               1 2 3 4 5 6 7
#  Data Science 0 3 3 5 9 8 6
#  Informatik   2 1 4 6 8 0 0
#  Mathe        0 0 0 0 1 2 4
# Statistik    5 6 2 7 9 8 1

# Absolute Häufigkeiten:
              
#                1   2   3   4   5   6   7 Sum
# Data Science   0   3   3   5   9   8   6  34
# Informatik     2   1   4   6   8   0   0  21
# Mathe          0   0   0   0   1   2   4   7
# Statistik      5   6   2   7   9   8   1  38
# Sum            7  10   9  18  27  18  11 100

# Relative Häufigkeiten:
              
#                   1      2      3      4      5      6      7    Sum
#  Data Science 0.0000 0.0075 0.0075 0.0125 0.0225 0.0200 0.0150 0.0850
# Informatik   0.0050 0.0025 0.0100 0.0150 0.0200 0.0000 0.0000 0.0525
# Mathe        0.0000 0.0000 0.0000 0.0000 0.0025 0.0050 0.0100 0.0175
# Statistik    0.0125 0.0150 0.0050 0.0175 0.0225 0.0200 0.0025 0.0950
# Sum          0.0175 0.0250 0.0225 0.0450 0.0675 0.0450 0.0275 0.2500

#Deskriptive Statistiken fuer Studienfach :
# : 34 (34%)
# :  (%)

#Deskriptive Statistiken fuer Interesse an Mathe :
#: 7 (7%)
#:  (%)


#(d) z.B.  D(df,2,6)
#mean in group FALSE mean in group TRUE              p-value 
#         24.5769231          24.8541667           0.4989292 

#(e) z.B. E(df, 5, 3)
#  [1] Low    Medium Medium High   High   High   Medium Medium High   Medium Low    Low    Low    High   Low    Medium High   High   Medium High  
# [21] Low    Low    Medium High   Low    Medium High   Medium Medium Medium High   Low    Medium Medium Medium Medium High   Low    Low    High  
# [41] Low    Low    Medium High   High   High   Medium High   High   High   Medium Low    Low    Low    Medium Low    High   High   High   Medium
# [61] High   Low    Medium High   High   High   High   Medium High   High   Medium High   Medium Medium Medium High   High   Medium Medium High  
# [81] High   High   Low    High   High   High   Low    Medium Low    High   High   Low    Low    Medium Low    High   High   High   High   High  
#Levels: Low Medium High



varuseful_a = function(data, var){
  if(var<=length(data) & var >= 1){
    if(class(data[[var]])==c("character")){
      return(FALSE)
    }
    else{
      return(TRUE)
    }
  }
  else{
    return(FALSE)
  }
}

varuseful = function(data, var){
  if(var<=length(data) & var >= 1){
    return(TRUE)
  }
  else{
    return(FALSE)
  }
}

varuseful(data, 7)

var_gleich = function(var1,var2){
  if(var1 == var2){
    return(FALSE)
  }
  else{
    return(TRUE)
  }
}

var_gleich(2,2)

var_t = function(data,var1,var2){
  if(class(data[[var1]])==c("integer") & class(data[[var2]])==c("logical")){
    return(TRUE)
  }
  else{
    return(FALSE)
  }
}

var_n = function(data,var){
  if(class(data[[var]])==c("logical") | class(data[[var]])==c("character")){
    return(FALSE)
  }
  else{
    return(TRUE)
  }
}

# (a)
A <- function(data, var) {
      mean_val <- mean(data[[var]])
      median_val <- median(data[[var]])
      sd_val <- sd(data[[var]])
      min_val <- min(data[[var]])
      max_val <- max(data[[var]])
      stats <- c(mean_val, median_val, sd_val, min_val, max_val)
      names(stats) <- c("mean","median","sd","min","max")
      return(stats)
}

# (b)
B <- function(data, var) {
  freq <- table(data[[var]])
  freq_in_percent <- prop.table(freq)
  stats <- cbind(freq, freq_in_percent)
  return(stats)
}
  
# (c)
C <- function(data, var1, var2) {
  table_val <- table(data[[var1]], data[[var2]])
  stats <- chisq.test(table_val)
  return(stats)
}

# (d)
D <- function(data, var1, var2) {
  ttest <- t.test(data[[var1]] ~ data[[var2]])
  stats <- c(ttest$estimate, ttest$p.value)
  names(stats) <- c("mean in group FALSE","mean in group TRUE ","p-value")
  return(stats)
}




install.packages("tidyverse")
library(tidyverse)
getwd()
setwd("D:/Zyx/R")
getwd()

data = read.csv("datensatz.csv")
data

library(reshape2)
library(ggthemes)

install.packages("ggplot2")
library(ggplot2)

install.packages("cowplot")
library(cowplot)

#a Histogramm von deskriptiven Statistik über Interesse an Mathe und Programmieren und Mathe_LK
compute_scale_stats_neu = function(data, var){
  if(varuseful_a(data,var)==TRUE){
    return(A(data, var))
  }
  else{
    return("var falsh eingeben")
  }
}

funk=compute_scale_stats_neu(data, 1)
for(i in c(2,4,5,6)){
  funk=rbind(funk,compute_scale_stats_neu(data, i))
}
funk=data.frame(funk)
rownames(funk)=c("ID","age","interest_math","interest_program","maths_LK")
#B=data.frame(t(funk))
funk

x <- c('mean','median','sd','min','max')
y <- c(50.50,50.5,29.0114920,1,100)
df <- data.frame(x = x, y = y)
p1 = ggplot(data = df, mapping = aes(x = x, y = y)) +  
  geom_bar(stat = 'identity') +
  labs(title='ID')

x <- c('mean','median','sd','min','max')
y <- c(25.21,25.0,1.8107145,20,29)
df <- data.frame(x = x, y = y)
p2 = ggplot(data = df, mapping = aes(x = x, y = y)) + geom_bar(stat = 'identity')+
  labs(title='Age')

x <- rep(c('mean','median','sd','min','max'),times = 3)
x
y <- rep(c('interest_math','interest_program','maths_LK'),each = 5)
y
z = NULL
k = 1
for(i in 3:5){
  for(j in 1:5){
    z[k] = funk[i,j]
    k = k+1
  }
}
z
df <- data.frame(x = x, y = y, z = z)
df
p3 = ggplot(data = df, mapping = aes(x = factor(x), y = z, fill = y)) + 
  geom_bar(stat = 'identity', position = 'dodge')+
  labs(title='interest_math + interest_program + maths_LK')

plot_grid(p1, p2, p3, labels = LETTERS[1:3], ncol = 2)

#b Histogramm von 5 Variablen
compute_cat_stats_neu <- function(data, var) {
  if(varuseful(data, var)==TRUE){
    return(B(data, var))
  }
  else{
    return("var falsh eingeben")
  }
}

a=data.frame(c(20:30),compute_cat_stats_neu(data,2)[,1])
colnames(a)=c("age","freq")
a
b=data.frame(c('Computer','Data','Maths','Statistics'),
             compute_cat_stats_neu(data,3)[,1])
colnames(b)=c("subject","freq")
b
c=data.frame(c(1:7),compute_cat_stats_neu(data,4)[,1])
colnames(c)=c("interest_math","freq")
c
d=data.frame(c(1:7),compute_cat_stats_neu(data,5)[,1])
colnames(d)=c("interest_programming","freq")
d
e=data.frame(c("FALSE","TRUE"),compute_cat_stats_neu(data,6)[,1])
colnames(e)=c("maths_LK","freq")
e

p1 = ggplot(data = a, mapping = aes(x = a[,1], y = a[,2])) + 
  geom_bar(stat = 'identity') + labs(x="age",y="freq")
p2 = ggplot(data = b, mapping = aes(x = b[,1], y = b[,2])) + 
  geom_bar(stat = 'identity') + labs(x="subject",y="freq")
p3 = ggplot(data = c, mapping = aes(x = c[,1], y = c[,2])) + 
  geom_bar(stat = 'identity') + labs(x="interest_math",y="freq")
p4 = ggplot(data = d, mapping = aes(x = d[,1], y = d[,2])) + 
  geom_bar(stat = 'identity') + labs(x="interest_programming",y="freq")
p5 = ggplot(data = e, mapping = aes(x = e[,1], y = e[,2])) + 
  geom_bar(stat = 'identity') + labs(x="maths_LK",y="freq")

plot_grid(p1, p2, p3, p4, p5, labels = LETTERS[1:5], ncol = 2)

#c 
compute_cat_assoc_stats_neu = function(data, var1, var2) {
  if(varuseful(data,var1) == TRUE & varuseful(data,var2) == TRUE){
    if(var_gleich(var1,var2) == TRUE){
      C(data, var1, var2)
    }
    else{
      return("var1 und var2 muss ungleich sein")
    }
  }
  else{
    return("var falsh eingeben")
  }
}

compute_cat_assoc_stats_neu(data, 2,3)

#d
compute_scale_dichotomous_assoc_stats_neu = function(data, var1, var2){
  if(varuseful(data, var1) == TRUE & varuseful(data, var2) == TRUE){
    if(var_gleich(var1,var2) == TRUE){
      if(var_t(data,var1,var2) == TRUE){
        D(data, var1, var2)
      }
      else{
        return("var1 muss als numeric and var2 muss als logical")
      }
    }
    else{
      return("var1 und var2 muss ungleich sein")
    }
  }
  else{
    return("var falsh eingeben")
  }
}

a=cbind(compute_scale_dichotomous_assoc_stats_neu(data, 2, 6),
        compute_scale_dichotomous_assoc_stats_neu(data, 4, 6),
        compute_scale_dichotomous_assoc_stats_neu(data, 5, 6))
colnames(a)=c("age","interest_math","interest_programming")
a

x <- c('mean in group FALSE','mean in group TRUE','p-value')
y <- c(25.1086957,25.2962963,0.6084578)
df <- data.frame(x = x, y = y)
p1 = ggplot(data = df, mapping = aes(x = x, y = y)) + geom_bar(stat = 'identity')+
  labs(title='Age')

x <- rep(c('mean in group FALSE','mean in group TRUE','p-value'),each = 2)
x
y <- rep(c('interest_math','interest_program'),times = 3)
y
z = NULL
k = 1
for(i in 1:3){
  for(j in 2:3){
    z[k] = a[i,j]
    k = k+1
  }
}
z
df <- data.frame(x = x, y = y, z = z)
df
p2 = ggplot(data = df, mapping = aes(x = factor(x), y = z, fill = y)) + 
  geom_bar(stat = 'identity', position = 'dodge')+
  labs(title='interest_math and interest_program in T-test')

plot_grid(p1, p2, labels = LETTERS[1:2], ncol = 2)


#e
categorize_ordinal_var_neu <- function(data, var) {
  if(var_n(data,var)==TRUE){
    return(E(data, var))
  }
  else{
    return("var muss als numeric eingeben")
  }
}

categorize_ordinal_var_neu(data, 2)
